<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<dict>
		<key>connection</key>
		<dict>
			<key>database</key>
			<string>movies</string>
			<key>host</key>
			<string>localhost</string>
			<key>name</key>
			<string>localhost</string>
			<key>rdbms_type</key>
			<string>mysql</string>
			<key>sslCACertFileLocation</key>
			<string></string>
			<key>sslCACertFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslCertificateFileLocation</key>
			<string></string>
			<key>sslCertificateFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslKeyFileLocation</key>
			<string></string>
			<key>sslKeyFileLocationEnabled</key>
			<integer>0</integer>
			<key>type</key>
			<string>SPSocketConnection</string>
			<key>useSSL</key>
			<integer>0</integer>
			<key>user</key>
			<string>root</string>
		</dict>
		<key>session</key>
		<dict>
			<key>connectionEncoding</key>
			<string>utf8</string>
			<key>contentFilter</key>
			<dict/>
			<key>contentPageNumber</key>
			<integer>1</integer>
			<key>contentSelection</key>
			<data>
			YnBsaXN0MDDUAQIDBAUGJCVYJHZlcnNpb25YJG9iamVjdHNZJGFy
			Y2hpdmVyVCR0b3ASAAGGoKgHCBMUFRYaIVUkbnVsbNMJCgsMDxJX
			TlMua2V5c1pOUy5vYmplY3RzViRjbGFzc6INDoACgAOiEBGABIAF
			gAdUdHlwZVRyb3dzXxAdU2VsZWN0aW9uRGV0YWlsVHlwZU5TSW5k
			ZXhTZXTSFwsYGVxOU1JhbmdlQ291bnQQAIAG0hscHR5aJGNsYXNz
			bmFtZVgkY2xhc3Nlc1pOU0luZGV4U2V0oh8gWk5TSW5kZXhTZXRY
			TlNPYmplY3TSGxwiI1xOU0RpY3Rpb25hcnmiIiBfEA9OU0tleWVk
			QXJjaGl2ZXLRJidUZGF0YYABAAgAEQAaACMALQAyADcAQABGAE0A
			VQBgAGcAagBsAG4AcQBzAHUAdwB8AIEAoQCmALMAtQC3ALwAxwDQ
			ANsA3gDpAPIA9wEEAQcBGQEcASEAAAAAAAACAQAAAAAAAAAoAAAA
			AAAAAAAAAAAAAAABIw==
			</data>
			<key>contentSortColIsAsc</key>
			<true/>
			<key>contentViewport</key>
			<string>{{0, 0}, {1706, 940}}</string>
			<key>isToolbarVisible</key>
			<true/>
			<key>queries</key>
			<string>-- Select all columns and rows from the movies table
-- SELECT * FROM movies

-- Select only the title and id of the first 10 rows
-- SELECT title FROM movies LIMIT 10

-- Find the movie with the id of 485
-- SELECT title FROM movies WHERE id = 485

-- Find the id (only that column) of the movie Made in America (1993)
-- SELECT id FROM movies WHERE title = 'Made in America (1993)'

-- Find the first 10 sorted alphabetically
-- SELECT title FROM movies ORDER BY title LIMIT 10

-- Find all movies from 2002
-- SELECT title FROM movies WHERE title LIKE '%2002%'

-- Find out what year the Godfather came out
-- SELECT title FROM movies WHERE title LIKE '%Godfather%'

-- Without using joins find all the comedies
-- SELECT title FROM movies WHERE genres LIKE '%comedy%'

-- Find all comedies in the year 2000
-- SELECT title FROM movies WHERE genres LIKE '%comedy%' AND title LIKE '%(2000)%'

-- Find any movies that are about death and are a comedy
-- SELECT title FROM movies WHERE genres, title LIKE '%comedy%' AND '%horror%'

-- Find any movies from either 2001 or 2002 with a title containing super
-- SELECT title FROM movies WHERE title LIKE '%(2001)%' OR title LIKE '%(2002)%' AND title LIKE '%super%'

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements
/* INSERT INTO 
	actors(id, name, character_name, movie_id, dob)
VALUES
-- 	(1, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
-- 	(2, 'Mason Cable', 'Joe Schmoes', 5, '04121867'),
-- 	(3, 'Serena Schelzi', 'Katniss Everdeen', 5, '04121978'),
	(4, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(5, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(6, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(7, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(8, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(9, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(10, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	
	(11, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(12, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(13, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(14, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(15, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(16, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(17, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(18, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(19, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(20, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	
	(21, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(22, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(23, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(24, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(25, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(26, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(27, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(28, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(29, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(30, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'); */


-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating
/* ALTER TABLE actors
ADD COLUMN mpaa VARCHAR(15) */


-- Find all the ratings for the movie Godfather, show just the title and the rating
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id */

-- Order the previous objective by newest to oldest
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE m.title LIKE '%)'
ORDER BY m.title DESC */

-- Find the comedies from 2005 and get the title and imdbid from the links table
/* SELECT m.title, l.imdb_Id
FROM movies m
LEFT JOIN links l ON m.id = l.movie_Id
WHERE m.title LIKE '%(2005)%' */

-- Find all movies that have no ratings
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE r.rating IS NULL */


-- Get the average rating for a movie
/* SELECT AVG(r.rating)
FROM ratings r */

-- Get the total ratings for a movie
/* SELECT SUM(r.rating) AS total_ratings
FROM ratings r */

-- Get the total movies for a genre
/* SELECT SUM(m.title) AS comedy_movies
FROM movies m
WHERE genres LIKE '%comedy%' */


-- Get the average rating for a user
/* SELECT AVG(r.rating)
FROM ratings r
WHERE r.user_id = 1 */

-- Find the user with the most ratings
/* SELECT r.user_id AS most_ratings
FROM ratings r
ORDER BY r.user_id DESC LIMIT 0, 1 */

-- Find the user with the highest average rating
/* SELECT r.user_id, AVG(r.rating) AS highest_average_rating
FROM ratings r
GROUP BY r.user_id DESC */

-- Find the user with the highest average rating with more than 50 reviews
SELECT SUM(r.user_id), AVG(r.rating) AS highest_average_rating
FROM ratings rd
WHERE r.user_id &gt; 50


-- Find the movies with an average rating over 4
SELECT AVG()
</string>
			<key>table</key>
			<string>ratings</string>
			<key>view</key>
			<string>SP_VIEW_CUSTOMQUERY</string>
			<key>windowVerticalDividerPosition</key>
			<real>214</real>
		</dict>
	</dict>
	<key>encrypted</key>
	<false/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>r.user_id</string>
		<string>-- Select all columns and rows from the movies table
-- SELECT * FROM movies

-- Select only the title and id of the first 10 rows
-- SELECT title FROM movies LIMIT 10

-- Find the movie with the id of 485
-- SELECT title FROM movies WHERE id = 485

-- Find the id (only that column) of the movie Made in America (1993)
-- SELECT id FROM movies WHERE title = 'Made in America (1993)'

-- Find the first 10 sorted alphabetically
-- SELECT title FROM movies ORDER BY title LIMIT 10

-- Find all movies from 2002
-- SELECT title FROM movies WHERE title LIKE '%2002%'

-- Find out what year the Godfather came out
-- SELECT title FROM movies WHERE title LIKE '%Godfather%'

-- Without using joins find all the comedies
-- SELECT title FROM movies WHERE genres LIKE '%comedy%'

-- Find all comedies in the year 2000
-- SELECT title FROM movies WHERE genres LIKE '%comedy%' AND title LIKE '%(2000)%'

-- Find any movies that are about death and are a comedy
-- SELECT title FROM movies WHERE genres, title LIKE '%comedy%' AND '%horror%'

-- Find any movies from either 2001 or 2002 with a title containing super
-- SELECT title FROM movies WHERE title LIKE '%(2001)%' OR title LIKE '%(2002)%' AND title LIKE '%super%'

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements
/* INSERT INTO 
	actors(id, name, character_name, movie_id, dob)
VALUES
-- 	(1, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
-- 	(2, 'Mason Cable', 'Joe Schmoes', 5, '04121867'),
-- 	(3, 'Serena Schelzi', 'Katniss Everdeen', 5, '04121978'),
	(4, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(5, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(6, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(7, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(8, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(9, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(10, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	
	(11, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(12, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(13, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(14, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(15, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(16, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(17, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(18, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(19, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(20, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	
	(21, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(22, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(23, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(24, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(25, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(26, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(27, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(28, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(29, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(30, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'); */


-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating
/* ALTER TABLE actors
ADD COLUMN mpaa VARCHAR(15) */


-- Find all the ratings for the movie Godfather, show just the title and the rating
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id */

-- Order the previous objective by newest to oldest
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE m.title LIKE '%)'
ORDER BY m.title DESC */

-- Find the comedies from 2005 and get the title and imdbid from the links table
/* SELECT m.title, l.imdb_Id
FROM movies m
LEFT JOIN links l ON m.id = l.movie_Id
WHERE m.title LIKE '%(2005)%' */

-- Find all movies that have no ratings
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE r.rating IS NULL */


-- Get the average rating for a movie
/* SELECT AVG(r.rating)
FROM ratings r */

-- Get the total ratings for a movie
/* SELECT SUM(r.rating) AS total_ratings
FROM ratings r */

-- Get the total movies for a genre
/* SELECT SUM(m.title) AS comedy_movies
FROM movies m
WHERE genres LIKE '%comedy%' */


-- Get the average rating for a user
/* SELECT AVG(r.rating)
FROM ratings r
WHERE r.user_id = 1 */

-- Find the user with the most ratings
/* SELECT r.user_id AS most_ratings
FROM ratings r
ORDER BY r.user_id DESC LIMIT 0, 1 */

-- Find the user with the highest average rating
/* SELECT r.user_id, AVG(r.rating) AS highest_average_rating
FROM ratings r
GROUP BY r.user_id DESC */

-- Find the user with the highest average rating with more than 50 reviews
SELECT r.user_id, AVG(r.rating) AS highest_average_rating
FROM ratings r
WHERE SUM(r.user_id) &gt; 50


-- Find the movies with an average rating over 4</string>
		<string>SELECT r.user_id, AVG(r.rating) AS highest_average_rating
FROM ratings r
WHERE SUM(r.user_id) &gt; 50
GROUP BY r.user_id DESC</string>
		<string>-- Select all columns and rows from the movies table
-- SELECT * FROM movies

-- Select only the title and id of the first 10 rows
-- SELECT title FROM movies LIMIT 10

-- Find the movie with the id of 485
-- SELECT title FROM movies WHERE id = 485

-- Find the id (only that column) of the movie Made in America (1993)
-- SELECT id FROM movies WHERE title = 'Made in America (1993)'

-- Find the first 10 sorted alphabetically
-- SELECT title FROM movies ORDER BY title LIMIT 10

-- Find all movies from 2002
-- SELECT title FROM movies WHERE title LIKE '%2002%'

-- Find out what year the Godfather came out
-- SELECT title FROM movies WHERE title LIKE '%Godfather%'

-- Without using joins find all the comedies
-- SELECT title FROM movies WHERE genres LIKE '%comedy%'

-- Find all comedies in the year 2000
-- SELECT title FROM movies WHERE genres LIKE '%comedy%' AND title LIKE '%(2000)%'

-- Find any movies that are about death and are a comedy
-- SELECT title FROM movies WHERE genres, title LIKE '%comedy%' AND '%horror%'

-- Find any movies from either 2001 or 2002 with a title containing super
-- SELECT title FROM movies WHERE title LIKE '%(2001)%' OR title LIKE '%(2002)%' AND title LIKE '%super%'

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements
/* INSERT INTO 
	actors(id, name, character_name, movie_id, dob)
VALUES
-- 	(1, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
-- 	(2, 'Mason Cable', 'Joe Schmoes', 5, '04121867'),
-- 	(3, 'Serena Schelzi', 'Katniss Everdeen', 5, '04121978'),
	(4, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(5, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(6, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(7, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(8, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(9, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(10, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	
	(11, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(12, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(13, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(14, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(15, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(16, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(17, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(18, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(19, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(20, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	
	(21, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(22, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(23, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(24, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(25, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(26, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(27, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(28, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(29, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(30, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'); */


-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating
/* ALTER TABLE actors
ADD COLUMN mpaa VARCHAR(15) */


-- Find all the ratings for the movie Godfather, show just the title and the rating
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id */

-- Order the previous objective by newest to oldest
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE m.title LIKE '%)'
ORDER BY m.title DESC */

-- Find the comedies from 2005 and get the title and imdbid from the links table
/* SELECT m.title, l.imdb_Id
FROM movies m
LEFT JOIN links l ON m.id = l.movie_Id
WHERE m.title LIKE '%(2005)%' */

-- Find all movies that have no ratings
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE r.rating IS NULL */


-- Get the average rating for a movie
/* SELECT AVG(r.rating)
FROM ratings r */

-- Get the total ratings for a movie
/* SELECT SUM(r.rating) AS total_ratings
FROM ratings r */

-- Get the total movies for a genre
/* SELECT SUM(m.title) AS comedy_movies
FROM movies m
WHERE genres LIKE '%comedy%' */


-- Get the average rating for a user
/* SELECT AVG(r.rating)
FROM ratings r
WHERE r.user_id = 1 */

-- Find the user with the most ratings
/* SELECT r.user_id AS most_ratings
FROM ratings r
ORDER BY r.user_id DESC LIMIT 0, 1 */

-- Find the user with the highest average rating
/* SELECT r.user_id, AVG(r.rating) AS highest_average_rating
FROM ratings r
GROUP BY r.user_id DESC */

-- Find the user with the highest average rating with more than 50 reviews
SELECT r.user_id, AVG(r.rating) AS highest_average_rating
FROM ratings r
WHERE r.user_id &gt; 50
GROUP BY r.user_id DESC

-- Find the movies with an average rating over 4</string>
		<string>-- Select all columns and rows from the movies table
-- SELECT * FROM movies

-- Select only the title and id of the first 10 rows
-- SELECT title FROM movies LIMIT 10

-- Find the movie with the id of 485
-- SELECT title FROM movies WHERE id = 485

-- Find the id (only that column) of the movie Made in America (1993)
-- SELECT id FROM movies WHERE title = 'Made in America (1993)'

-- Find the first 10 sorted alphabetically
-- SELECT title FROM movies ORDER BY title LIMIT 10

-- Find all movies from 2002
-- SELECT title FROM movies WHERE title LIKE '%2002%'

-- Find out what year the Godfather came out
-- SELECT title FROM movies WHERE title LIKE '%Godfather%'

-- Without using joins find all the comedies
-- SELECT title FROM movies WHERE genres LIKE '%comedy%'

-- Find all comedies in the year 2000
-- SELECT title FROM movies WHERE genres LIKE '%comedy%' AND title LIKE '%(2000)%'

-- Find any movies that are about death and are a comedy
-- SELECT title FROM movies WHERE genres, title LIKE '%comedy%' AND '%horror%'

-- Find any movies from either 2001 or 2002 with a title containing super
-- SELECT title FROM movies WHERE title LIKE '%(2001)%' OR title LIKE '%(2002)%' AND title LIKE '%super%'

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements
/* INSERT INTO 
	actors(id, name, character_name, movie_id, dob)
VALUES
-- 	(1, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
-- 	(2, 'Mason Cable', 'Joe Schmoes', 5, '04121867'),
-- 	(3, 'Serena Schelzi', 'Katniss Everdeen', 5, '04121978'),
	(4, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(5, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(6, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(7, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(8, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(9, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(10, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	
	(11, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(12, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(13, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(14, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(15, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(16, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(17, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(18, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(19, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(20, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	
	(21, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(22, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(23, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(24, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(25, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(26, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(27, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(28, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(29, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(30, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'); */


-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating
/* ALTER TABLE actors
ADD COLUMN mpaa VARCHAR(15) */


-- Find all the ratings for the movie Godfather, show just the title and the rating
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id */

-- Order the previous objective by newest to oldest
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE m.title LIKE '%)'
ORDER BY m.title DESC */

-- Find the comedies from 2005 and get the title and imdbid from the links table
/* SELECT m.title, l.imdb_Id
FROM movies m
LEFT JOIN links l ON m.id = l.movie_Id
WHERE m.title LIKE '%(2005)%' */

-- Find all movies that have no ratings
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE r.rating IS NULL */


-- Get the average rating for a movie
/* SELECT AVG(r.rating)
FROM ratings r */

-- Get the total ratings for a movie
/* SELECT SUM(r.rating) AS total_ratings
FROM ratings r */

-- Get the total movies for a genre
/* SELECT SUM(m.title) AS comedy_movies
FROM movies m
WHERE genres LIKE '%comedy%' */


-- Get the average rating for a user
/* SELECT AVG(r.rating)
FROM ratings r
WHERE r.user_id = 1 */

-- Find the user with the most ratings
/* SELECT r.user_id AS most_ratings
FROM ratings r
ORDER BY r.user_id DESC LIMIT 0, 1 */

-- Find the user with the highest average rating
/* SELECT r.user_id, AVG(r.rating) AS highest_average_rating
FROM ratings r
GROUP BY r.user_id DESC */

-- Find the user with the highest average rating with more than 50 reviews
SELECT r.user_id, r.rating, AVG(r.rating) AS highest_average_rating
FROM ratings r
WHERE r.user_id &gt; 50
GROUP BY r.user_id DESC

-- Find the movies with an average rating over 4</string>
		<string>-- Select all columns and rows from the movies table
-- SELECT * FROM movies

-- Select only the title and id of the first 10 rows
-- SELECT title FROM movies LIMIT 10

-- Find the movie with the id of 485
-- SELECT title FROM movies WHERE id = 485

-- Find the id (only that column) of the movie Made in America (1993)
-- SELECT id FROM movies WHERE title = 'Made in America (1993)'

-- Find the first 10 sorted alphabetically
-- SELECT title FROM movies ORDER BY title LIMIT 10

-- Find all movies from 2002
-- SELECT title FROM movies WHERE title LIKE '%2002%'

-- Find out what year the Godfather came out
-- SELECT title FROM movies WHERE title LIKE '%Godfather%'

-- Without using joins find all the comedies
-- SELECT title FROM movies WHERE genres LIKE '%comedy%'

-- Find all comedies in the year 2000
-- SELECT title FROM movies WHERE genres LIKE '%comedy%' AND title LIKE '%(2000)%'

-- Find any movies that are about death and are a comedy
-- SELECT title FROM movies WHERE genres, title LIKE '%comedy%' AND '%horror%'

-- Find any movies from either 2001 or 2002 with a title containing super
-- SELECT title FROM movies WHERE title LIKE '%(2001)%' OR title LIKE '%(2002)%' AND title LIKE '%super%'

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements
/* INSERT INTO 
	actors(id, name, character_name, movie_id, dob)
VALUES
-- 	(1, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
-- 	(2, 'Mason Cable', 'Joe Schmoes', 5, '04121867'),
-- 	(3, 'Serena Schelzi', 'Katniss Everdeen', 5, '04121978'),
	(4, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(5, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(6, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(7, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(8, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(9, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(10, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	
	(11, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(12, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(13, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(14, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(15, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(16, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(17, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(18, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(19, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(20, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	
	(21, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(22, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(23, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(24, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(25, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(26, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(27, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(28, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(29, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(30, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'); */


-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating
/* ALTER TABLE actors
ADD COLUMN mpaa VARCHAR(15) */


-- Find all the ratings for the movie Godfather, show just the title and the rating
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id */

-- Order the previous objective by newest to oldest
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE m.title LIKE '%)'
ORDER BY m.title DESC */

-- Find the comedies from 2005 and get the title and imdbid from the links table
/* SELECT m.title, l.imdb_Id
FROM movies m
LEFT JOIN links l ON m.id = l.movie_Id
WHERE m.title LIKE '%(2005)%' */

-- Find all movies that have no ratings
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE r.rating IS NULL */


-- Get the average rating for a movie
/* SELECT AVG(r.rating)
FROM ratings r */

-- Get the total ratings for a movie
/* SELECT SUM(r.rating) AS total_ratings
FROM ratings r */

-- Get the total movies for a genre
/* SELECT SUM(m.title) AS comedy_movies
FROM movies m
WHERE genres LIKE '%comedy%' */


-- Get the average rating for a user
/* SELECT AVG(r.rating)
FROM ratings r
WHERE r.user_id = 1 */

-- Find the user with the most ratings
/* SELECT r.user_id AS most_ratings
FROM ratings r
ORDER BY r.user_id DESC LIMIT 0, 1 */

-- Find the user with the highest average rating
/* SELECT r.user_id, AVG(r.rating) AS highest_average_rating
FROM ratings r
GROUP BY r.user_id DESC */

-- Find the user with the highest average rating with more than 50 reviews
SELECT r.user_id, r.rating, AVG(r.rating) AS highest_average_rating,
FROM ratings r
WHERE r.user_id &gt; 50
GROUP BY r.user_id DESC

-- Find the movies with an average rating over 4</string>
		<string>-- Select all columns and rows from the movies table
-- SELECT * FROM movies

-- Select only the title and id of the first 10 rows
-- SELECT title FROM movies LIMIT 10

-- Find the movie with the id of 485
-- SELECT title FROM movies WHERE id = 485

-- Find the id (only that column) of the movie Made in America (1993)
-- SELECT id FROM movies WHERE title = 'Made in America (1993)'

-- Find the first 10 sorted alphabetically
-- SELECT title FROM movies ORDER BY title LIMIT 10

-- Find all movies from 2002
-- SELECT title FROM movies WHERE title LIKE '%2002%'

-- Find out what year the Godfather came out
-- SELECT title FROM movies WHERE title LIKE '%Godfather%'

-- Without using joins find all the comedies
-- SELECT title FROM movies WHERE genres LIKE '%comedy%'

-- Find all comedies in the year 2000
-- SELECT title FROM movies WHERE genres LIKE '%comedy%' AND title LIKE '%(2000)%'

-- Find any movies that are about death and are a comedy
-- SELECT title FROM movies WHERE genres, title LIKE '%comedy%' AND '%horror%'

-- Find any movies from either 2001 or 2002 with a title containing super
-- SELECT title FROM movies WHERE title LIKE '%(2001)%' OR title LIKE '%(2002)%' AND title LIKE '%super%'

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements
/* INSERT INTO 
	actors(id, name, character_name, movie_id, dob)
VALUES
-- 	(1, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
-- 	(2, 'Mason Cable', 'Joe Schmoes', 5, '04121867'),
-- 	(3, 'Serena Schelzi', 'Katniss Everdeen', 5, '04121978'),
	(4, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(5, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(6, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(7, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(8, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(9, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(10, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	
	(11, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(12, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(13, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(14, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(15, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(16, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(17, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(18, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(19, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(20, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	
	(21, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(22, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(23, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(24, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(25, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(26, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(27, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(28, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(29, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(30, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'); */


-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating
/* ALTER TABLE actors
ADD COLUMN mpaa VARCHAR(15) */


-- Find all the ratings for the movie Godfather, show just the title and the rating
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id */

-- Order the previous objective by newest to oldest
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE m.title LIKE '%)'
ORDER BY m.title DESC */

-- Find the comedies from 2005 and get the title and imdbid from the links table
/* SELECT m.title, l.imdb_Id
FROM movies m
LEFT JOIN links l ON m.id = l.movie_Id
WHERE m.title LIKE '%(2005)%' */

-- Find all movies that have no ratings
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE r.rating IS NULL */


-- Get the average rating for a movie
/* SELECT AVG(r.rating)
FROM ratings r */

-- Get the total ratings for a movie
/* SELECT SUM(r.rating) AS total_ratings
FROM ratings r */

-- Get the total movies for a genre
/* SELECT SUM(m.title) AS comedy_movies
FROM movies m
WHERE genres LIKE '%comedy%' */


-- Get the average rating for a user
/* SELECT AVG(r.rating)
FROM ratings r
WHERE r.user_id = 1 */

-- Find the user with the most ratings
/* SELECT r.user_id AS most_ratings
FROM ratings r
ORDER BY r.user_id DESC LIMIT 0, 1 */

-- Find the user with the highest average rating
/* SELECT r.user_id, AVG(r.rating) AS highest_average_rating
FROM ratings r
GROUP BY r.user_id DESC */

-- Find the user with the highest average rating with more than 50 reviews
SELECT r.user_id, AVG(r.rating) AS highest_average_rating, r.rating
FROM ratings r
WHERE r.user_id &gt; 50
GROUP BY r.user_id DESC

-- Find the movies with an average rating over 4</string>
		<string>-- Select all columns and rows from the movies table
-- SELECT * FROM movies

-- Select only the title and id of the first 10 rows
-- SELECT title FROM movies LIMIT 10

-- Find the movie with the id of 485
-- SELECT title FROM movies WHERE id = 485

-- Find the id (only that column) of the movie Made in America (1993)
-- SELECT id FROM movies WHERE title = 'Made in America (1993)'

-- Find the first 10 sorted alphabetically
-- SELECT title FROM movies ORDER BY title LIMIT 10

-- Find all movies from 2002
-- SELECT title FROM movies WHERE title LIKE '%2002%'

-- Find out what year the Godfather came out
-- SELECT title FROM movies WHERE title LIKE '%Godfather%'

-- Without using joins find all the comedies
-- SELECT title FROM movies WHERE genres LIKE '%comedy%'

-- Find all comedies in the year 2000
-- SELECT title FROM movies WHERE genres LIKE '%comedy%' AND title LIKE '%(2000)%'

-- Find any movies that are about death and are a comedy
-- SELECT title FROM movies WHERE genres, title LIKE '%comedy%' AND '%horror%'

-- Find any movies from either 2001 or 2002 with a title containing super
-- SELECT title FROM movies WHERE title LIKE '%(2001)%' OR title LIKE '%(2002)%' AND title LIKE '%super%'

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements
/* INSERT INTO 
	actors(id, name, character_name, movie_id, dob)
VALUES
-- 	(1, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
-- 	(2, 'Mason Cable', 'Joe Schmoes', 5, '04121867'),
-- 	(3, 'Serena Schelzi', 'Katniss Everdeen', 5, '04121978'),
	(4, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(5, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(6, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(7, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(8, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(9, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(10, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	
	(11, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(12, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(13, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(14, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(15, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(16, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(17, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(18, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(19, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(20, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	
	(21, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(22, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(23, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(24, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(25, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(26, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(27, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(28, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(29, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(30, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'); */


-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating
/* ALTER TABLE actors
ADD COLUMN mpaa VARCHAR(15) */


-- Find all the ratings for the movie Godfather, show just the title and the rating
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id */

-- Order the previous objective by newest to oldest
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE m.title LIKE '%)'
ORDER BY m.title DESC */

-- Find the comedies from 2005 and get the title and imdbid from the links table
/* SELECT m.title, l.imdb_Id
FROM movies m
LEFT JOIN links l ON m.id = l.movie_Id
WHERE m.title LIKE '%(2005)%' */

-- Find all movies that have no ratings
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE r.rating IS NULL */


-- Get the average rating for a movie
/* SELECT AVG(r.rating)
FROM ratings r */

-- Get the total ratings for a movie
/* SELECT SUM(r.rating) AS total_ratings
FROM ratings r */

-- Get the total movies for a genre
/* SELECT SUM(m.title) AS comedy_movies
FROM movies m
WHERE genres LIKE '%comedy%' */


-- Get the average rating for a user
/* SELECT AVG(r.rating)
FROM ratings r
WHERE r.user_id = 1 */

-- Find the user with the most ratings
/* SELECT r.user_id AS most_ratings
FROM ratings r
ORDER BY r.user_id DESC LIMIT 0, 1 */

-- Find the user with the highest average rating
/* SELECT r.user_id, AVG(r.rating) AS highest_average_rating
FROM ratings r
GROUP BY r.user_id DESC */

-- Find the user with the highest average rating with more than 50 reviews
SELECT r.user_id, AVG(r.rating) AS highest_average_rating, rating
FROM ratings r
WHERE r.user_id &gt; 50
GROUP BY r.user_id DESC

-- Find the movies with an average rating over 4</string>
		<string>-- Select all columns and rows from the movies table
-- SELECT * FROM movies

-- Select only the title and id of the first 10 rows
-- SELECT title FROM movies LIMIT 10

-- Find the movie with the id of 485
-- SELECT title FROM movies WHERE id = 485

-- Find the id (only that column) of the movie Made in America (1993)
-- SELECT id FROM movies WHERE title = 'Made in America (1993)'

-- Find the first 10 sorted alphabetically
-- SELECT title FROM movies ORDER BY title LIMIT 10

-- Find all movies from 2002
-- SELECT title FROM movies WHERE title LIKE '%2002%'

-- Find out what year the Godfather came out
-- SELECT title FROM movies WHERE title LIKE '%Godfather%'

-- Without using joins find all the comedies
-- SELECT title FROM movies WHERE genres LIKE '%comedy%'

-- Find all comedies in the year 2000
-- SELECT title FROM movies WHERE genres LIKE '%comedy%' AND title LIKE '%(2000)%'

-- Find any movies that are about death and are a comedy
-- SELECT title FROM movies WHERE genres, title LIKE '%comedy%' AND '%horror%'

-- Find any movies from either 2001 or 2002 with a title containing super
-- SELECT title FROM movies WHERE title LIKE '%(2001)%' OR title LIKE '%(2002)%' AND title LIKE '%super%'

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements
/* INSERT INTO 
	actors(id, name, character_name, movie_id, dob)
VALUES
-- 	(1, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
-- 	(2, 'Mason Cable', 'Joe Schmoes', 5, '04121867'),
-- 	(3, 'Serena Schelzi', 'Katniss Everdeen', 5, '04121978'),
	(4, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(5, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(6, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(7, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(8, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(9, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(10, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	
	(11, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(12, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(13, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(14, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(15, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(16, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(17, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(18, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(19, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(20, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	
	(21, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(22, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(23, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(24, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(25, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(26, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(27, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(28, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(29, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(30, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'); */


-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating
/* ALTER TABLE actors
ADD COLUMN mpaa VARCHAR(15) */


-- Find all the ratings for the movie Godfather, show just the title and the rating
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id */

-- Order the previous objective by newest to oldest
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE m.title LIKE '%)'
ORDER BY m.title DESC */

-- Find the comedies from 2005 and get the title and imdbid from the links table
/* SELECT m.title, l.imdb_Id
FROM movies m
LEFT JOIN links l ON m.id = l.movie_Id
WHERE m.title LIKE '%(2005)%' */

-- Find all movies that have no ratings
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE r.rating IS NULL */


-- Get the average rating for a movie
/* SELECT AVG(r.rating)
FROM ratings r */

-- Get the total ratings for a movie
/* SELECT SUM(r.rating) AS total_ratings
FROM ratings r */

-- Get the total movies for a genre
/* SELECT SUM(m.title) AS comedy_movies
FROM movies m
WHERE genres LIKE '%comedy%' */


-- Get the average rating for a user
/* SELECT AVG(r.rating)
FROM ratings r
WHERE r.user_id = 1 */

-- Find the user with the most ratings
/* SELECT r.user_id AS most_ratings
FROM ratings r
ORDER BY r.user_id DESC LIMIT 0, 1 */

-- Find the user with the highest average rating
/* SELECT r.user_id, AVG(r.user_id) AS highest_average_rating
FROM ratings r
GROUP BY r.user_id DESC */

-- Find the user with the highest average rating with more than 50 reviews
SELECT r.user_id, AVG(r.rating) AS highest_average_rating
FROM ratings r
WHERE r.user_id &gt; 50
GROUP BY r.user_id DESC

-- Find the movies with an average rating over 4</string>
		<string>-- Select all columns and rows from the movies table
-- SELECT * FROM movies

-- Select only the title and id of the first 10 rows
-- SELECT title FROM movies LIMIT 10

-- Find the movie with the id of 485
-- SELECT title FROM movies WHERE id = 485

-- Find the id (only that column) of the movie Made in America (1993)
-- SELECT id FROM movies WHERE title = 'Made in America (1993)'

-- Find the first 10 sorted alphabetically
-- SELECT title FROM movies ORDER BY title LIMIT 10

-- Find all movies from 2002
-- SELECT title FROM movies WHERE title LIKE '%2002%'

-- Find out what year the Godfather came out
-- SELECT title FROM movies WHERE title LIKE '%Godfather%'

-- Without using joins find all the comedies
-- SELECT title FROM movies WHERE genres LIKE '%comedy%'

-- Find all comedies in the year 2000
-- SELECT title FROM movies WHERE genres LIKE '%comedy%' AND title LIKE '%(2000)%'

-- Find any movies that are about death and are a comedy
-- SELECT title FROM movies WHERE genres, title LIKE '%comedy%' AND '%horror%'

-- Find any movies from either 2001 or 2002 with a title containing super
-- SELECT title FROM movies WHERE title LIKE '%(2001)%' OR title LIKE '%(2002)%' AND title LIKE '%super%'

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements
/* INSERT INTO 
	actors(id, name, character_name, movie_id, dob)
VALUES
-- 	(1, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
-- 	(2, 'Mason Cable', 'Joe Schmoes', 5, '04121867'),
-- 	(3, 'Serena Schelzi', 'Katniss Everdeen', 5, '04121978'),
	(4, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(5, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(6, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(7, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(8, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(9, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(10, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	
	(11, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(12, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(13, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(14, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(15, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(16, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(17, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(18, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(19, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(20, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	
	(21, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(22, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(23, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(24, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(25, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(26, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(27, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(28, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(29, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(30, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'); */


-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating
/* ALTER TABLE actors
ADD COLUMN mpaa VARCHAR(15) */


-- Find all the ratings for the movie Godfather, show just the title and the rating
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id */

-- Order the previous objective by newest to oldest
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE m.title LIKE '%)'
ORDER BY m.title DESC */

-- Find the comedies from 2005 and get the title and imdbid from the links table
/* SELECT m.title, l.imdb_Id
FROM movies m
LEFT JOIN links l ON m.id = l.movie_Id
WHERE m.title LIKE '%(2005)%' */

-- Find all movies that have no ratings
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE r.rating IS NULL */


-- Get the average rating for a movie
/* SELECT AVG(r.rating)
FROM ratings r */

-- Get the total ratings for a movie
/* SELECT SUM(r.rating) AS total_ratings
FROM ratings r */

-- Get the total movies for a genre
/* SELECT SUM(m.title) AS comedy_movies
FROM movies m
WHERE genres LIKE '%comedy%' */


-- Get the average rating for a user
/* SELECT AVG(r.rating)
FROM ratings r
WHERE r.user_id = 1 */

-- Find the user with the most ratings
/* SELECT r.user_id AS most_ratings
FROM ratings r
ORDER BY r.user_id DESC LIMIT 0, 1 */

-- Find the user with the highest average rating
/* SELECT r.user_id, AVG(r.user_id) AS highest_average_rating
FROM ratings r
GROUP BY r.user_id DESC */

-- Find the user with the highest average rating with more than 50 reviews
SELECT r.user_id, AVG(r.user_id) AS highest_average_rating
FROM ratings r
WHERE r.user_id &gt; 50
GROUP BY r.user_id DESC

-- Find the movies with an average rating over 4</string>
		<string>-- Select all columns and rows from the movies table
-- SELECT * FROM movies

-- Select only the title and id of the first 10 rows
-- SELECT title FROM movies LIMIT 10

-- Find the movie with the id of 485
-- SELECT title FROM movies WHERE id = 485

-- Find the id (only that column) of the movie Made in America (1993)
-- SELECT id FROM movies WHERE title = 'Made in America (1993)'

-- Find the first 10 sorted alphabetically
-- SELECT title FROM movies ORDER BY title LIMIT 10

-- Find all movies from 2002
-- SELECT title FROM movies WHERE title LIKE '%2002%'

-- Find out what year the Godfather came out
-- SELECT title FROM movies WHERE title LIKE '%Godfather%'

-- Without using joins find all the comedies
-- SELECT title FROM movies WHERE genres LIKE '%comedy%'

-- Find all comedies in the year 2000
-- SELECT title FROM movies WHERE genres LIKE '%comedy%' AND title LIKE '%(2000)%'

-- Find any movies that are about death and are a comedy
-- SELECT title FROM movies WHERE genres, title LIKE '%comedy%' AND '%horror%'

-- Find any movies from either 2001 or 2002 with a title containing super
-- SELECT title FROM movies WHERE title LIKE '%(2001)%' OR title LIKE '%(2002)%' AND title LIKE '%super%'

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements
/* INSERT INTO 
	actors(id, name, character_name, movie_id, dob)
VALUES
-- 	(1, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
-- 	(2, 'Mason Cable', 'Joe Schmoes', 5, '04121867'),
-- 	(3, 'Serena Schelzi', 'Katniss Everdeen', 5, '04121978'),
	(4, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(5, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(6, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(7, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(8, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(9, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(10, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	
	(11, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(12, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(13, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(14, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(15, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(16, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(17, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(18, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(19, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(20, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	
	(21, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(22, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(23, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(24, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(25, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(26, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(27, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(28, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(29, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(30, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'); */


-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating
/* ALTER TABLE actors
ADD COLUMN mpaa VARCHAR(15) */


-- Find all the ratings for the movie Godfather, show just the title and the rating
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id */

-- Order the previous objective by newest to oldest
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE m.title LIKE '%)'
ORDER BY m.title DESC */

-- Find the comedies from 2005 and get the title and imdbid from the links table
/* SELECT m.title, l.imdb_Id
FROM movies m
LEFT JOIN links l ON m.id = l.movie_Id
WHERE m.title LIKE '%(2005)%' */

-- Find all movies that have no ratings
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE r.rating IS NULL */


-- Get the average rating for a movie
/* SELECT AVG(r.rating)
FROM ratings r */

-- Get the total ratings for a movie
/* SELECT SUM(r.rating) AS total_ratings
FROM ratings r */

-- Get the total movies for a genre
/* SELECT SUM(m.title) AS comedy_movies
FROM movies m
WHERE genres LIKE '%comedy%' */


-- Get the average rating for a user
/* SELECT AVG(r.rating)
FROM ratings r
WHERE r.user_id = 1 */

-- Find the user with the most ratings
/* SELECT r.user_id AS most_ratings
FROM ratings r
ORDER BY r.user_id DESC LIMIT 0, 1 */

-- Find the user with the highest average rating
SELECT r.user_id, AVG(r.user_id) AS highest_average_rating
FROM ratings r
GROUP BY r.user_id DESC

-- Find the user with the highest average rating with more than 50 reviews


-- Find the movies with an average rating over 4</string>
		<string>-- Select all columns and rows from the movies table
-- SELECT * FROM movies

-- Select only the title and id of the first 10 rows
-- SELECT title FROM movies LIMIT 10

-- Find the movie with the id of 485
-- SELECT title FROM movies WHERE id = 485

-- Find the id (only that column) of the movie Made in America (1993)
-- SELECT id FROM movies WHERE title = 'Made in America (1993)'

-- Find the first 10 sorted alphabetically
-- SELECT title FROM movies ORDER BY title LIMIT 10

-- Find all movies from 2002
-- SELECT title FROM movies WHERE title LIKE '%2002%'

-- Find out what year the Godfather came out
-- SELECT title FROM movies WHERE title LIKE '%Godfather%'

-- Without using joins find all the comedies
-- SELECT title FROM movies WHERE genres LIKE '%comedy%'

-- Find all comedies in the year 2000
-- SELECT title FROM movies WHERE genres LIKE '%comedy%' AND title LIKE '%(2000)%'

-- Find any movies that are about death and are a comedy
-- SELECT title FROM movies WHERE genres, title LIKE '%comedy%' AND '%horror%'

-- Find any movies from either 2001 or 2002 with a title containing super
-- SELECT title FROM movies WHERE title LIKE '%(2001)%' OR title LIKE '%(2002)%' AND title LIKE '%super%'

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements
/* INSERT INTO 
	actors(id, name, character_name, movie_id, dob)
VALUES
-- 	(1, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
-- 	(2, 'Mason Cable', 'Joe Schmoes', 5, '04121867'),
-- 	(3, 'Serena Schelzi', 'Katniss Everdeen', 5, '04121978'),
	(4, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(5, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(6, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(7, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(8, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(9, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(10, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	
	(11, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(12, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(13, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(14, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(15, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(16, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(17, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(18, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(19, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(20, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	
	(21, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(22, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(23, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(24, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(25, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(26, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(27, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(28, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(29, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(30, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'); */


-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating
/* ALTER TABLE actors
ADD COLUMN mpaa VARCHAR(15) */


-- Find all the ratings for the movie Godfather, show just the title and the rating
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id */

-- Order the previous objective by newest to oldest
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE m.title LIKE '%)'
ORDER BY m.title DESC */

-- Find the comedies from 2005 and get the title and imdbid from the links table
/* SELECT m.title, l.imdb_Id
FROM movies m
LEFT JOIN links l ON m.id = l.movie_Id
WHERE m.title LIKE '%(2005)%' */

-- Find all movies that have no ratings
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE r.rating IS NULL */


-- Get the average rating for a movie
/* SELECT AVG(r.rating)
FROM ratings r */

-- Get the total ratings for a movie
/* SELECT SUM(r.rating) AS total_ratings
FROM ratings r */

-- Get the total movies for a genre
/* SELECT SUM(m.title) AS comedy_movies
FROM movies m
WHERE genres LIKE '%comedy%' */


-- Get the average rating for a user
/* SELECT AVG(r.rating)
FROM ratings r
WHERE r.user_id = 1 */

-- Find the user with the most ratings
/* SELECT r.user_id AS most_ratings
FROM ratings r
ORDER BY r.user_id DESC LIMIT 0, 1 */

-- Find the user with the highest average rating
SELECT r.user_id, AVG(r.user_id) AS highest_average
FROM ratings r
GROUP BY r.user_id DESC

-- Find the user with the highest average rating with more than 50 reviews


-- Find the movies with an average rating over 4</string>
		<string>-- Select all columns and rows from the movies table
-- SELECT * FROM movies

-- Select only the title and id of the first 10 rows
-- SELECT title FROM movies LIMIT 10

-- Find the movie with the id of 485
-- SELECT title FROM movies WHERE id = 485

-- Find the id (only that column) of the movie Made in America (1993)
-- SELECT id FROM movies WHERE title = 'Made in America (1993)'

-- Find the first 10 sorted alphabetically
-- SELECT title FROM movies ORDER BY title LIMIT 10

-- Find all movies from 2002
-- SELECT title FROM movies WHERE title LIKE '%2002%'

-- Find out what year the Godfather came out
-- SELECT title FROM movies WHERE title LIKE '%Godfather%'

-- Without using joins find all the comedies
-- SELECT title FROM movies WHERE genres LIKE '%comedy%'

-- Find all comedies in the year 2000
-- SELECT title FROM movies WHERE genres LIKE '%comedy%' AND title LIKE '%(2000)%'

-- Find any movies that are about death and are a comedy
-- SELECT title FROM movies WHERE genres, title LIKE '%comedy%' AND '%horror%'

-- Find any movies from either 2001 or 2002 with a title containing super
-- SELECT title FROM movies WHERE title LIKE '%(2001)%' OR title LIKE '%(2002)%' AND title LIKE '%super%'

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements
/* INSERT INTO 
	actors(id, name, character_name, movie_id, dob)
VALUES
-- 	(1, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
-- 	(2, 'Mason Cable', 'Joe Schmoes', 5, '04121867'),
-- 	(3, 'Serena Schelzi', 'Katniss Everdeen', 5, '04121978'),
	(4, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(5, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(6, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(7, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(8, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(9, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(10, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	
	(11, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(12, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(13, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(14, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(15, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(16, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(17, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(18, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(19, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(20, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	
	(21, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(22, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(23, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(24, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(25, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(26, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(27, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(28, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(29, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(30, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'); */


-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating
/* ALTER TABLE actors
ADD COLUMN mpaa VARCHAR(15) */


-- Find all the ratings for the movie Godfather, show just the title and the rating
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id */

-- Order the previous objective by newest to oldest
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE m.title LIKE '%)'
ORDER BY m.title DESC */

-- Find the comedies from 2005 and get the title and imdbid from the links table
/* SELECT m.title, l.imdb_Id
FROM movies m
LEFT JOIN links l ON m.id = l.movie_Id
WHERE m.title LIKE '%(2005)%' */

-- Find all movies that have no ratings
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE r.rating IS NULL */


-- Get the average rating for a movie
/* SELECT AVG(r.rating)
FROM ratings r */

-- Get the total ratings for a movie
/* SELECT SUM(r.rating) AS total_ratings
FROM ratings r */

-- Get the total movies for a genre
/* SELECT SUM(m.title) AS comedy_movies
FROM movies m
WHERE genres LIKE '%comedy%' */


-- Get the average rating for a user
/* SELECT AVG(r.rating)
FROM ratings r
WHERE r.user_id = 1 */

-- Find the user with the most ratings
/* SELECT r.user_id AS most_ratings
FROM ratings r
ORDER BY r.user_id DESC LIMIT 0, 1 */

-- Find the user with the highest average rating
SELECT AVG(r.user_id) AS highest_average
FROM ratings r
GROUP BY r.user_id DESC

-- Find the user with the highest average rating with more than 50 reviews


-- Find the movies with an average rating over 4</string>
		<string>-- Select all columns and rows from the movies table
-- SELECT * FROM movies

-- Select only the title and id of the first 10 rows
-- SELECT title FROM movies LIMIT 10

-- Find the movie with the id of 485
-- SELECT title FROM movies WHERE id = 485

-- Find the id (only that column) of the movie Made in America (1993)
-- SELECT id FROM movies WHERE title = 'Made in America (1993)'

-- Find the first 10 sorted alphabetically
-- SELECT title FROM movies ORDER BY title LIMIT 10

-- Find all movies from 2002
-- SELECT title FROM movies WHERE title LIKE '%2002%'

-- Find out what year the Godfather came out
-- SELECT title FROM movies WHERE title LIKE '%Godfather%'

-- Without using joins find all the comedies
-- SELECT title FROM movies WHERE genres LIKE '%comedy%'

-- Find all comedies in the year 2000
-- SELECT title FROM movies WHERE genres LIKE '%comedy%' AND title LIKE '%(2000)%'

-- Find any movies that are about death and are a comedy
-- SELECT title FROM movies WHERE genres, title LIKE '%comedy%' AND '%horror%'

-- Find any movies from either 2001 or 2002 with a title containing super
-- SELECT title FROM movies WHERE title LIKE '%(2001)%' OR title LIKE '%(2002)%' AND title LIKE '%super%'

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements
/* INSERT INTO 
	actors(id, name, character_name, movie_id, dob)
VALUES
-- 	(1, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
-- 	(2, 'Mason Cable', 'Joe Schmoes', 5, '04121867'),
-- 	(3, 'Serena Schelzi', 'Katniss Everdeen', 5, '04121978'),
	(4, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(5, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(6, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(7, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(8, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(9, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(10, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	
	(11, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(12, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(13, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(14, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(15, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(16, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(17, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(18, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(19, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(20, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	
	(21, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(22, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(23, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(24, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(25, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(26, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(27, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(28, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(29, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(30, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'); */


-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating
/* ALTER TABLE actors
ADD COLUMN mpaa VARCHAR(15) */


-- Find all the ratings for the movie Godfather, show just the title and the rating
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id */

-- Order the previous objective by newest to oldest
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE m.title LIKE '%)'
ORDER BY m.title DESC */

-- Find the comedies from 2005 and get the title and imdbid from the links table
/* SELECT m.title, l.imdb_Id
FROM movies m
LEFT JOIN links l ON m.id = l.movie_Id
WHERE m.title LIKE '%(2005)%' */

-- Find all movies that have no ratings
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE r.rating IS NULL */


-- Get the average rating for a movie
/* SELECT AVG(r.rating)
FROM ratings r */

-- Get the total ratings for a movie
/* SELECT SUM(r.rating) AS total_ratings
FROM ratings r */

-- Get the total movies for a genre
/* SELECT SUM(m.title) AS comedy_movies
FROM movies m
WHERE genres LIKE '%comedy%' */


-- Get the average rating for a user
/* SELECT AVG(r.rating)
FROM ratings r
WHERE r.user_id = 1 */

-- Find the user with the most ratings
/* SELECT r.user_id AS most_ratings
FROM ratings r
ORDER BY r.user_id DESC LIMIT 0, 1 */

-- Find the user with the highest average rating
SELECT AVG(r.user_id) AS highest_average
FROM ratings r
GROUP BY r.user_id

-- Find the user with the highest average rating with more than 50 reviews


-- Find the movies with an average rating over 4</string>
		<string>-- Select all columns and rows from the movies table
-- SELECT * FROM movies

-- Select only the title and id of the first 10 rows
-- SELECT title FROM movies LIMIT 10

-- Find the movie with the id of 485
-- SELECT title FROM movies WHERE id = 485

-- Find the id (only that column) of the movie Made in America (1993)
-- SELECT id FROM movies WHERE title = 'Made in America (1993)'

-- Find the first 10 sorted alphabetically
-- SELECT title FROM movies ORDER BY title LIMIT 10

-- Find all movies from 2002
-- SELECT title FROM movies WHERE title LIKE '%2002%'

-- Find out what year the Godfather came out
-- SELECT title FROM movies WHERE title LIKE '%Godfather%'

-- Without using joins find all the comedies
-- SELECT title FROM movies WHERE genres LIKE '%comedy%'

-- Find all comedies in the year 2000
-- SELECT title FROM movies WHERE genres LIKE '%comedy%' AND title LIKE '%(2000)%'

-- Find any movies that are about death and are a comedy
-- SELECT title FROM movies WHERE genres, title LIKE '%comedy%' AND '%horror%'

-- Find any movies from either 2001 or 2002 with a title containing super
-- SELECT title FROM movies WHERE title LIKE '%(2001)%' OR title LIKE '%(2002)%' AND title LIKE '%super%'

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements
/* INSERT INTO 
	actors(id, name, character_name, movie_id, dob)
VALUES
-- 	(1, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
-- 	(2, 'Mason Cable', 'Joe Schmoes', 5, '04121867'),
-- 	(3, 'Serena Schelzi', 'Katniss Everdeen', 5, '04121978'),
	(4, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(5, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(6, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(7, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(8, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(9, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(10, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	
	(11, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(12, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(13, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(14, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(15, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(16, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(17, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(18, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(19, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(20, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	
	(21, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(22, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(23, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(24, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(25, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(26, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(27, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(28, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(29, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(30, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'); */


-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating
/* ALTER TABLE actors
ADD COLUMN mpaa VARCHAR(15) */


-- Find all the ratings for the movie Godfather, show just the title and the rating
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id */

-- Order the previous objective by newest to oldest
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE m.title LIKE '%)'
ORDER BY m.title DESC */

-- Find the comedies from 2005 and get the title and imdbid from the links table
/* SELECT m.title, l.imdb_Id
FROM movies m
LEFT JOIN links l ON m.id = l.movie_Id
WHERE m.title LIKE '%(2005)%' */

-- Find all movies that have no ratings
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE r.rating IS NULL */


-- Get the average rating for a movie
/* SELECT AVG(r.rating)
FROM ratings r */

-- Get the total ratings for a movie
/* SELECT SUM(r.rating) AS total_ratings
FROM ratings r */

-- Get the total movies for a genre
/* SELECT SUM(m.title) AS comedy_movies
FROM movies m
WHERE genres LIKE '%comedy%' */


-- Get the average rating for a user
/* SELECT AVG(r.rating)
FROM ratings r
WHERE r.user_id = 1 */

-- Find the user with the most ratings
/* SELECT r.user_id AS most_ratings
FROM ratings r
ORDER BY r.user_id DESC LIMIT 0, 1 */

-- Find the user with the highest average rating
SELECT AVG(r.user_id) AS highest_average
FROM ratings r
WHERE r.user_id = *

-- Find the user with the highest average rating with more than 50 reviews


-- Find the movies with an average rating over 4</string>
		<string>-- Select all columns and rows from the movies table
-- SELECT * FROM movies

-- Select only the title and id of the first 10 rows
-- SELECT title FROM movies LIMIT 10

-- Find the movie with the id of 485
-- SELECT title FROM movies WHERE id = 485

-- Find the id (only that column) of the movie Made in America (1993)
-- SELECT id FROM movies WHERE title = 'Made in America (1993)'

-- Find the first 10 sorted alphabetically
-- SELECT title FROM movies ORDER BY title LIMIT 10

-- Find all movies from 2002
-- SELECT title FROM movies WHERE title LIKE '%2002%'

-- Find out what year the Godfather came out
-- SELECT title FROM movies WHERE title LIKE '%Godfather%'

-- Without using joins find all the comedies
-- SELECT title FROM movies WHERE genres LIKE '%comedy%'

-- Find all comedies in the year 2000
-- SELECT title FROM movies WHERE genres LIKE '%comedy%' AND title LIKE '%(2000)%'

-- Find any movies that are about death and are a comedy
-- SELECT title FROM movies WHERE genres, title LIKE '%comedy%' AND '%horror%'

-- Find any movies from either 2001 or 2002 with a title containing super
-- SELECT title FROM movies WHERE title LIKE '%(2001)%' OR title LIKE '%(2002)%' AND title LIKE '%super%'

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements
/* INSERT INTO 
	actors(id, name, character_name, movie_id, dob)
VALUES
-- 	(1, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
-- 	(2, 'Mason Cable', 'Joe Schmoes', 5, '04121867'),
-- 	(3, 'Serena Schelzi', 'Katniss Everdeen', 5, '04121978'),
	(4, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(5, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(6, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(7, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(8, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(9, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(10, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	
	(11, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(12, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(13, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(14, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(15, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(16, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(17, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(18, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(19, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(20, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	
	(21, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(22, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(23, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(24, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(25, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(26, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(27, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(28, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(29, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(30, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'); */


-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating
/* ALTER TABLE actors
ADD COLUMN mpaa VARCHAR(15) */


-- Find all the ratings for the movie Godfather, show just the title and the rating
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id */

-- Order the previous objective by newest to oldest
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE m.title LIKE '%)'
ORDER BY m.title DESC */

-- Find the comedies from 2005 and get the title and imdbid from the links table
/* SELECT m.title, l.imdb_Id
FROM movies m
LEFT JOIN links l ON m.id = l.movie_Id
WHERE m.title LIKE '%(2005)%' */

-- Find all movies that have no ratings
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE r.rating IS NULL */


-- Get the average rating for a movie
/* SELECT AVG(r.rating)
FROM ratings r */

-- Get the total ratings for a movie
/* SELECT SUM(r.rating) AS total_ratings
FROM ratings r */

-- Get the total movies for a genre
/* SELECT SUM(m.title) AS comedy_movies
FROM movies m
WHERE genres LIKE '%comedy%' */


-- Get the average rating for a user
/* SELECT AVG(r.rating)
FROM ratings r
WHERE r.user_id = 1 */

-- Find the user with the most ratings
/* SELECT r.user_id AS most_ratings
FROM ratings r
ORDER BY r.user_id DESC LIMIT 0, 1 */

-- Find the user with the highest average rating
SELECT AVG(r.user_id) AS highest_average
FROM ratings r
WHERE r.user_id = 2

-- Find the user with the highest average rating with more than 50 reviews


-- Find the movies with an average rating over 4</string>
		<string>-- Select all columns and rows from the movies table
-- SELECT * FROM movies

-- Select only the title and id of the first 10 rows
-- SELECT title FROM movies LIMIT 10

-- Find the movie with the id of 485
-- SELECT title FROM movies WHERE id = 485

-- Find the id (only that column) of the movie Made in America (1993)
-- SELECT id FROM movies WHERE title = 'Made in America (1993)'

-- Find the first 10 sorted alphabetically
-- SELECT title FROM movies ORDER BY title LIMIT 10

-- Find all movies from 2002
-- SELECT title FROM movies WHERE title LIKE '%2002%'

-- Find out what year the Godfather came out
-- SELECT title FROM movies WHERE title LIKE '%Godfather%'

-- Without using joins find all the comedies
-- SELECT title FROM movies WHERE genres LIKE '%comedy%'

-- Find all comedies in the year 2000
-- SELECT title FROM movies WHERE genres LIKE '%comedy%' AND title LIKE '%(2000)%'

-- Find any movies that are about death and are a comedy
-- SELECT title FROM movies WHERE genres, title LIKE '%comedy%' AND '%horror%'

-- Find any movies from either 2001 or 2002 with a title containing super
-- SELECT title FROM movies WHERE title LIKE '%(2001)%' OR title LIKE '%(2002)%' AND title LIKE '%super%'

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements
/* INSERT INTO 
	actors(id, name, character_name, movie_id, dob)
VALUES
-- 	(1, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
-- 	(2, 'Mason Cable', 'Joe Schmoes', 5, '04121867'),
-- 	(3, 'Serena Schelzi', 'Katniss Everdeen', 5, '04121978'),
	(4, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(5, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(6, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(7, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(8, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(9, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(10, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	
	(11, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(12, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(13, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(14, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(15, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(16, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(17, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(18, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(19, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(20, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	
	(21, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(22, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(23, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(24, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(25, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(26, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(27, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(28, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(29, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(30, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'); */


-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating
/* ALTER TABLE actors
ADD COLUMN mpaa VARCHAR(15) */


-- Find all the ratings for the movie Godfather, show just the title and the rating
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id */

-- Order the previous objective by newest to oldest
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE m.title LIKE '%)'
ORDER BY m.title DESC */

-- Find the comedies from 2005 and get the title and imdbid from the links table
/* SELECT m.title, l.imdb_Id
FROM movies m
LEFT JOIN links l ON m.id = l.movie_Id
WHERE m.title LIKE '%(2005)%' */

-- Find all movies that have no ratings
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE r.rating IS NULL */


-- Get the average rating for a movie
/* SELECT AVG(r.rating)
FROM ratings r */

-- Get the total ratings for a movie
/* SELECT SUM(r.rating) AS total_ratings
FROM ratings r */

-- Get the total movies for a genre
/* SELECT SUM(m.title) AS comedy_movies
FROM movies m
WHERE genres LIKE '%comedy%' */


-- Get the average rating for a user
/* SELECT AVG(r.rating)
FROM ratings r
WHERE r.user_id = 1 */

-- Find the user with the most ratings
/* SELECT r.user_id AS most_ratings
FROM ratings r
ORDER BY r.user_id DESC LIMIT 0, 1 */

-- Find the user with the highest average rating
SELECT AVG(r.user_id) AS highest_average
FROM ratings r
WHERE r.user_id = 1

-- Find the user with the highest average rating with more than 50 reviews


-- Find the movies with an average rating over 4</string>
		<string>-- Select all columns and rows from the movies table
-- SELECT * FROM movies

-- Select only the title and id of the first 10 rows
-- SELECT title FROM movies LIMIT 10

-- Find the movie with the id of 485
-- SELECT title FROM movies WHERE id = 485

-- Find the id (only that column) of the movie Made in America (1993)
-- SELECT id FROM movies WHERE title = 'Made in America (1993)'

-- Find the first 10 sorted alphabetically
-- SELECT title FROM movies ORDER BY title LIMIT 10

-- Find all movies from 2002
-- SELECT title FROM movies WHERE title LIKE '%2002%'

-- Find out what year the Godfather came out
-- SELECT title FROM movies WHERE title LIKE '%Godfather%'

-- Without using joins find all the comedies
-- SELECT title FROM movies WHERE genres LIKE '%comedy%'

-- Find all comedies in the year 2000
-- SELECT title FROM movies WHERE genres LIKE '%comedy%' AND title LIKE '%(2000)%'

-- Find any movies that are about death and are a comedy
-- SELECT title FROM movies WHERE genres, title LIKE '%comedy%' AND '%horror%'

-- Find any movies from either 2001 or 2002 with a title containing super
-- SELECT title FROM movies WHERE title LIKE '%(2001)%' OR title LIKE '%(2002)%' AND title LIKE '%super%'

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements
/* INSERT INTO 
	actors(id, name, character_name, movie_id, dob)
VALUES
-- 	(1, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
-- 	(2, 'Mason Cable', 'Joe Schmoes', 5, '04121867'),
-- 	(3, 'Serena Schelzi', 'Katniss Everdeen', 5, '04121978'),
	(4, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(5, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(6, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(7, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(8, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(9, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(10, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	
	(11, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(12, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(13, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(14, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(15, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(16, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(17, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(18, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(19, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(20, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	
	(21, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(22, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(23, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(24, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(25, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(26, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(27, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(28, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(29, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(30, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'); */


-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating
/* ALTER TABLE actors
ADD COLUMN mpaa VARCHAR(15) */


-- Find all the ratings for the movie Godfather, show just the title and the rating
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id */

-- Order the previous objective by newest to oldest
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE m.title LIKE '%)'
ORDER BY m.title DESC */

-- Find the comedies from 2005 and get the title and imdbid from the links table
/* SELECT m.title, l.imdb_Id
FROM movies m
LEFT JOIN links l ON m.id = l.movie_Id
WHERE m.title LIKE '%(2005)%' */

-- Find all movies that have no ratings
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE r.rating IS NULL */


-- Get the average rating for a movie
/* SELECT AVG(r.rating)
FROM ratings r */

-- Get the total ratings for a movie
/* SELECT SUM(r.rating) AS total_ratings
FROM ratings r */

-- Get the total movies for a genre
/* SELECT SUM(m.title) AS comedy_movies
FROM movies m
WHERE genres LIKE '%comedy%' */


-- Get the average rating for a user
/* SELECT AVG(r.rating)
FROM ratings r
WHERE r.user_id = 1 */

-- Find the user with the most ratings
/* SELECT r.user_id AS most_ratings
FROM ratings r
ORDER BY r.user_id DESC LIMIT 0, 1 */

-- Find the user with the highest average rating
SELECT AVG(r.user_id) AS highest_average
FROM ratings r

-- Find the user with the highest average rating with more than 50 reviews


-- Find the movies with an average rating over 4</string>
		<string>-- Select all columns and rows from the movies table
-- SELECT * FROM movies

-- Select only the title and id of the first 10 rows
-- SELECT title FROM movies LIMIT 10

-- Find the movie with the id of 485
-- SELECT title FROM movies WHERE id = 485

-- Find the id (only that column) of the movie Made in America (1993)
-- SELECT id FROM movies WHERE title = 'Made in America (1993)'

-- Find the first 10 sorted alphabetically
-- SELECT title FROM movies ORDER BY title LIMIT 10

-- Find all movies from 2002
-- SELECT title FROM movies WHERE title LIKE '%2002%'

-- Find out what year the Godfather came out
-- SELECT title FROM movies WHERE title LIKE '%Godfather%'

-- Without using joins find all the comedies
-- SELECT title FROM movies WHERE genres LIKE '%comedy%'

-- Find all comedies in the year 2000
-- SELECT title FROM movies WHERE genres LIKE '%comedy%' AND title LIKE '%(2000)%'

-- Find any movies that are about death and are a comedy
-- SELECT title FROM movies WHERE genres, title LIKE '%comedy%' AND '%horror%'

-- Find any movies from either 2001 or 2002 with a title containing super
-- SELECT title FROM movies WHERE title LIKE '%(2001)%' OR title LIKE '%(2002)%' AND title LIKE '%super%'

-- Pick 3 movies and create insert statements for 10 actors each. You should use the multi value insert statements
/* INSERT INTO 
	actors(id, name, character_name, movie_id, dob)
VALUES
-- 	(1, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
-- 	(2, 'Mason Cable', 'Joe Schmoes', 5, '04121867'),
-- 	(3, 'Serena Schelzi', 'Katniss Everdeen', 5, '04121978'),
	(4, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(5, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(6, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(7, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(8, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(9, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(10, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	
	(11, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(12, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(13, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(14, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(15, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(16, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(17, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(18, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(19, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	(20, 'Victor Velasquez', 'Henry Kissinger', 12, '02121867'),
	
	(21, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(22, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(23, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(24, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(25, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(26, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(27, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(28, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(29, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'),
	(30, 'Victor Velasquez', 'Henry Kissinger', 5, '02121867'); */


-- Create a new column in the movie table to hold the MPAA rating. UPDATE 5 different movies to their correct rating
/* ALTER TABLE actors
ADD COLUMN mpaa VARCHAR(15) */


-- Find all the ratings for the movie Godfather, show just the title and the rating
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id */

-- Order the previous objective by newest to oldest
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE m.title LIKE '%)'
ORDER BY m.title DESC */

-- Find the comedies from 2005 and get the title and imdbid from the links table
/* SELECT m.title, l.imdb_Id
FROM movies m
LEFT JOIN links l ON m.id = l.movie_Id
WHERE m.title LIKE '%(2005)%' */

-- Find all movies that have no ratings
/* SELECT m.title, r.rating
FROM movies m
LEFT JOIN ratings r ON m.id = r.movie_id
WHERE r.rating IS NULL */


-- Get the average rating for a movie
/* SELECT AVG(r.rating)
FROM ratings r */

-- Get the total ratings for a movie
/* SELECT SUM(r.rating) AS total_ratings
FROM ratings r */

-- Get the total movies for a genre
/* SELECT SUM(m.title) AS comedy_movies
FROM movies m
WHERE genres LIKE '%comedy%' */


-- Get the average rating for a user
/* SELECT AVG(r.rating)
FROM ratings r
WHERE r.user_id = 1 */

-- Find the user with the most ratings
/* SELECT r.user_id AS most_ratings
FROM ratings r
ORDER BY r.user_id DESC LIMIT 0, 1 */

-- Find the user with the highest average rating
SELECT AVG(r.user_id)
FROM ratings r

-- Find the user with the highest average rating with more than 50 reviews


-- Find the movies with an average rating over 4</string>
		<string>SELECT AVG(r.user_id)
FROM ratings</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>5.7.15</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
